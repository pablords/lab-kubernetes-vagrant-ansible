- name: Add an apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Install Kubernetes binaries
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - kubelet
      - kubeadm
      - kubectl

- name: delete kubelet if exists
  shell: sudo rm -rf /etc/default/kubelet

- name: Configure node ip
  lineinfile:
    create: yes
    path: /etc/default/kubelet
    line: KUBELET_EXTRA_ARGS=--node-ip={{ansible_eth1.ipv4.address}}
  when: ansible_nodename ==  "master"

- name: Restart kubelet
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted

- name: config cgGroup Docker
  shell: |
    echo " " >> /etc/docker/daemon.json
    echo '{ "exec-opts": ["native.cgroupdriver=systemd"] }' >> /etc/docker/daemon.json

- name: Restart Docker
  service:
    name: docker
    daemon_reload: yes
    state: restarted

- name: reset kubeadm
  command: sudo kubeadm reset -f

- name: Initialize the Kubernetes cluster using kubeadm
  command: kubeadm init --apiserver-advertise-address={{ ansible_eth1.ipv4.address }} --apiserver-cert-extra-sans={{ ansible_eth1.ipv4.address }}  --node-name k8s-master --pod-network-cidr={{ ansible_eth1.ipv4.network }}/16
  when: ansible_nodename ==  "master"

- name: delete if exists kubeConfig
  shell: rm -rf /home/vagrant/.kube

- name: Setup kubeconfig for vagrant user
  command: "{{ item }}"
  with_items:
    - sudo mkdir -p /home/vagrant/.kube
    - sudo cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    - sudo chown vagrant:vagrant /home/vagrant/.kube/config

- name: Install kube-router pod network
  become: false
  command: kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command

- name: Copy join command to local file
  become: false
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
